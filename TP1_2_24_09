billes = ['A_1_1';'A_1_2';'A_1_3';'A_1_4';'A_1_5';'A_1_6';'A_2_1';'A_2_2';...
          'A_2_3';'A_2_4';'A_2_5';'A_2_6';'A_3_1';'A_3_3';'A_3_4';...
          'A_3_5';'A_3_6';'A_4_1';'A_4_2';'A_4_3';'A_4_4';'A_4_5';'A_4_6';...
          'A_5_1';'A_5_2';'A_5_5';'B_1_1';'B_1_2';'B_1_3';...
          'B_1_4';'B_1_5';'B_2_1';'B_2_2';'B_2_3';'B_2_4';'B_2_5';'B_3_1';...
          'B_3_2';'B_3_3';'B_3_4';'B_3_5';'B_4_1';'B_4_2';'B_4_3';'B_4_4';...
          'B_4_5';'B_5_1';'B_5_2';'B_5_3';'B_5_5'];

errors = zeros(40,1);      
n = randperm(50);
new_billes = ['A_1_1';'A_1_2';'A_1_3';'A_1_4';'A_1_5';'A_1_6';'A_2_1';'A_2_2';...
          'A_2_3';'A_2_4';'A_2_5';'A_2_6';'A_3_1';'A_3_3';'A_3_4';...
          'A_3_5';'A_3_6';'A_4_1';'A_4_2';'A_4_3';'A_4_4';'A_4_5';'A_4_6';...
          'A_5_1';'A_5_2';'A_5_5';'B_1_1';'B_1_2';'B_1_3';...
          'B_1_4';'B_1_5';'B_2_1';'B_2_2';'B_2_3';'B_2_4';'B_2_5';'B_3_1';...
          'B_3_2';'B_3_3';'B_3_4';'B_3_5';'B_4_1';'B_4_2';'B_4_3';'B_4_4';...
          'B_4_5';'B_5_1';'B_5_2';'B_5_3';'B_5_5'];
    
    for v = 1:50
        new_billes(v,:) = billes(n(v),:);
    end
        billes = new_billes

        final = 42
for i = 1:final;
    
    for k = 1:length(billes)-i
    obj = GetObjet(Calib_Implicite.Calib.point_4D, billes(k, :));
    billes_3D(k,:) =  obj.coord;
    end
    
clear obj k n v new_billes

% Chargement des coordonnées 2D des projections des 10 billes
billes_2D_PA0 = zeros(length(billes)-i,2);
billes_2D_PA20 = zeros(length(billes)-i,2);
for k = 1:length(billes)-i
    obj = GetObjet(P28.Calib.point_2D{PA0}, billes(k, :));
    billes_2D_PA0(k,:) =  obj.coord;
    obj = GetObjet(P28.Calib.point_2D{PA20}, billes(k, :));
    billes_2D_PA20(k,:) = obj.coord;
end
clear obj k

% Matrice de calibration implicite DLT PA0
A_0 = zeros(100-2*i,11);
for k = 1:50-i
    A_0(2*k-1:2*k,:) = [billes_3D(k,1) billes_3D(k,2) billes_3D(k,3) 1 0 0 0 0 ...
      -billes_2D_PA0(k,1)*billes_3D(k,1) -billes_2D_PA0(k,1)*billes_3D(k,2) ...
      -billes_2D_PA0(k,1)*billes_3D(k,3) ; 0 0 0 0 billes_3D(k,1) billes_3D(k,2) ...
      billes_3D(k,3) 1 -billes_2D_PA0(k,2)*billes_3D(k,1) -billes_2D_PA0(k,2)*billes_3D(k,2) ...
      -billes_2D_PA0(k,2)*billes_3D(k,3)];
end
b_0 = zeros(100-2*i,1);
for k = 1:50-i
    b_0(2*k-1) = billes_2D_PA0(k,1);
    b_0(2*k) = billes_2D_PA0(k,2);
end
M_0_2 = (A_0'*A_0)\A_0'*b_0;
M_0 = [M_0_2(1,1) M_0_2(2,1) M_0_2(3,1) M_0_2(4,1); M_0_2(5,1) M_0_2(6,1) M_0_2(7,1) M_0_2(8,1); M_0_2(9,1) M_0_2(10,1) M_0_2(11,1) 1];
clear b_0 M_0_2 A_0

% Matrice de calibration implicite DLT PA20
A_20 = zeros(100-2*i,11);
for k = 1:50-i
    A_20(2*k-1:2*k,:) = [billes_3D(k,1) billes_3D(k,2) billes_3D(k,3) 1 0 0 0 0 ...
      -billes_2D_PA20(k,1)*billes_3D(k,1) -billes_2D_PA20(k,1)*billes_3D(k,2) ...
      -billes_2D_PA20(k,1)*billes_3D(k,3) ; 0 0 0 0 billes_3D(k,1) billes_3D(k,2) ...
      billes_3D(k,3) 1 -billes_2D_PA20(k,2)*billes_3D(k,1) -billes_2D_PA20(k,2)*billes_3D(k,2) ...
      -billes_2D_PA20(k,2)*billes_3D(k,3)];
end
b_20 = zeros(100-2*i,1);
for k = 1:50-i
    b_20(2*k-1) = billes_2D_PA20(k,1);
    b_20(2*k) = billes_2D_PA20(k,2);
end
%M_20_2 = zeros(11,1);
M_20_2 = (A_20'*A_20)\A_20'*b_20;
M_20 = [M_20_2(1,1) M_20_2(2,1) M_20_2(3,1) M_20_2(4,1); M_20_2(5,1) M_20_2(6,1) M_20_2(7,1) M_20_2(8,1); M_20_2(9,1) M_20_2(10,1) M_20_2(11,1) 1];
clear b_20 M_20_2 A_20

%% Question 1.3

% Récupérer coords. 2D dans les 2 vues des points formant une vertèbre 
affichage3Dpoint_2 = [];
nom = 'Vertebre_T1';
subVert = 0;

for ii = 1:17
    switch subVert
        case 1
            nom = strrep(nom, 'T1', 'T2');
        case 2
            nom = strrep(nom, 'T2', 'T3');
        case 3
            nom = strrep(nom, 'T3', 'T4');
        case 4
            nom = strrep(nom, 'T4', 'T5');        
        case 5
            nom = strrep(nom, 'T5', 'T6');
        case 6
            nom = strrep(nom, 'T6', 'T7');
        case 7
            nom = strrep(nom, 'T7', 'T8');
        case 8
            nom = strrep(nom, 'T8', 'T9');
        case 9
            nom = strrep(nom, 'T9', 'T10');
        case 10
            nom = strrep(nom, 'T10', 'T11');
        case 11
            nom = strrep(nom, 'T11', 'T12');
        case 12
            nom = strrep(nom, 'T12', 'L1');
        case 13
            nom = strrep(nom, 'L1', 'L2');
        case 14
            nom = strrep(nom, 'L2', 'L3');
        case 15
            nom = strrep(nom, 'L3', 'L4');
        case 16
            nom = strrep(nom, 'L4', 'L5');
        otherwise
    end  

    %nom = 'Vertebre_T1';
    vertebre = GetObjet(P28.Objet,nom);
    vertebre_PA0  = zeros(6,2);
    vertebre_PA20 = zeros(6,2);
    for k = 1:6,
        vertebre_PA0(k,:) = vertebre.point_2D{PA0}(k).coord;
        vertebre_PA20(k,:) = vertebre.point_2D{PA20}(k).coord;
    end
    clear k

    % Créer la matrice du système A.P = b

    % Matrice (M_0 ; M_20)

    M = [M_0; M_20];
    X = zeros(6,4);

    for k = 1:6
        x = recons(vertebre_PA0(k,:),vertebre_PA20(k,:),M_0,M_20);
        X(k,:) = x;
    end

    affichage3Dpoint_2 = [affichage3Dpoint_2; X];
    subVert = subVert + 1;
end

errors(i,1) = RMS(1, affichage3Dpoint_2, affichage3Dpoint);
end

plot(1:final,errors)
